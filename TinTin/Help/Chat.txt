Chat

Syntax: #chat {command} {argument}

The #chat command is used to create peer to peer connections to other mud clients, typically for the purpose of chatting and sending files. This is a decentralized chat system, meaning you have to exchange ip addresses and port numbers with other users in order to connect to them.

#chat {initialize} {port}

#chat initialize launches your chat server. The port number is optional, and by default 4050 is used as your port. After using this command other people can connect to your chat server using your ip address and port number, and in turn you can connect to other people.

#chat {name} {your name}

By default your name is set to TinTin, but most servers will reject you if there is already someone with the name TinTin connected, so one of the first things you'd want to do is change your chat name. Your name can include color codes. Some names aren't accepted by tt++ chat servers, like the name 'all' and names longer than 20 characters.

#chat {call} {ip address} {port}

#chat call is used to connect to another chat server. If you omit the port argument the default port (4050) is used.

#chat {color} {color names}

The default chat color is bold red, you can change this with the #chat color command, for example: #chat color bold yellow, or using a 256 color code: #chat color <cde>.

#chat {message} {user|all} {text}

This is the main command used for communication. If you use #chat message all, the message is marked as public and send to everyone you are connected to.

#chat {emote} {user|all} {text}

This command works exactly like #chat message, except in appearance as all it does is prepend your name to the message.

#chat {paste} {user|all} {text}

This command allows pasting, appending input that is followed in quick succession to the message. Keep in mind that most mud clients won't properly receive messages that are longer than 40 lines.

#chat {reply} {text}

#chat reply replies to the last person you received a private message from.

#chat {send} {user|all}

This command sends a raw data string to another person, and subsequently requires knowledge of the Mud Master Chat Protocol in order to use it.

#chat dnd

DND stands for 'do not disturb' and this command toggles your DND state. When enabled all new incoming connections are automatically closed.

#chat {ip} {address}

This command sets your ip address, which isn't set by default, and is send when connecting to another mud client. TinTin# ignores the reported ip of other mud clients and simply grabs the socket address, but other mud clients might need it set.

#chat {who}

#chat who shows all people you are connected to. The first column shows a reference number for the connection, which can be used instead of the connection's name when sending someone a message. The second column shows the connection's name. The third column shows flags set for the connection, (P)rivate, (I)gnore, (S)erve, (F)orward to user, and (f)orward from user. The following columns show ip, port, and mud client name.

#chat {info}

This command shows your name, ip address, port, download dir, reply, and DND status.

#chat {ignore} {user}

This command will ignore the given user, who won't be notified of the fact that you're ignoring them, or that their messages are no longer coming through.

#chat {private} {user|all}

This command will disable the peek and request command from working for the given connection.

#chat {public} {user|all}

This command is the opposite of the private command, allowing the peek and request command to work for the given connection. New connections are public by default.

#chat {peek} {user}

This command shows the given user's public connections.

#chat {request} {user}

This command will obtain the given user's public connections and automatically connect to them if you aren't already.

#chat {ping} {user}

This command displays the time it takes for your ping to arrive and be send back to you, in milli seconds.

#chat {zap} {user|all}

This command closes the connection to the given user.

#chat {forward} {user}

This command will forward all chat messages to the given user as snoop data. To avoid infinite loops, forwarding to a user is disabled when receiving snoop data from that user.

#chat {forwardall} {user}

This command will forward everything that is saved to your scrollback buffer to the given user as snoop data.

#chat {serve} {user}

This command will cause you to forward all public chat messages to the given user, and all public chat messages from that user to everyone you are connected to. To avoid infinite loops the messages are forwarded as private messages.

#chat {group} {user} {name}

This command allows you to assign the given user to a group. You can use a group name with the emote, message, and send commands. If you use #chat group without an argument it will behave like #chat who, showing a list of all users and their group name.

#chat {sendfile} {user} {filename}

This command allows you to send a file to the given user, they must accept it before transfer begins.

#chat {accept} {user}

Accepts a file transfer after the user has offered to send a file.

#chat {decline} {user}

Declines a file transfer after the user has offered to send a file.

#chat {cancel} {user}

Cancels a file transfer after it has been started.

#chat {filestat} {user}

Shows information about a file transfer currently in progress.

#chat {downloaddir} {directory}

This command sets the directory where new downloads are placed into.